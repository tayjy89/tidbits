import React, { useState } from 'react';
import { Button } from "/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "/components/ui/card";

const questions = [
  { question: 'What is the most common cause of tuberculosis?', options: ['Bacteria', 'Virus', 'Fungus', 'Parasite'], answer: 'Bacteria', prize: 100 },
  { question: 'What is the primary method of tuberculosis transmission?', options: ['Airborne', 'Waterborne', 'Vectorborne', 'Contaminated food'], answer: 'Airborne', prize: 200 },
  { question: 'What is the name of the vaccine used to prevent tuberculosis?', options: ['BCG', 'MMR', 'DTaP', 'Hepatitis B'], answer: 'BCG', prize: 300 },
  { question: 'What is the term for a person who has been infected with tuberculosis but does not show symptoms?', options: ['Latent', 'Active', 'Dormant', 'Asymptomatic'], answer: 'Latent', prize: 500 },
  { question: 'What is the name of the disease caused by the bacterium Mycobacterium tuberculosis?', options: ['Tuberculosis', 'Pneumonia', 'Bronchitis', 'Emphysema'], answer: 'Tuberculosis', prize: 1000 },
  { question: 'What is the primary symptom of tuberculosis?', options: ['Coughing', 'Fever', 'Fatigue', 'Weight loss'], answer: 'Coughing', prize: 2000 },
  { question: 'What is the term for the process of tuberculosis bacteria becoming resistant to antibiotics?', options: ['Mutation', 'Genetic drift', 'Natural selection', 'Antibiotic resistance'], answer: 'Antibiotic resistance', prize: 4000 },
  { question: 'What is the name of the test used to diagnose tuberculosis?', options: ['Mantoux test', 'Chest X-ray', 'Sputum smear', 'Blood test'], answer: 'Mantoux test', prize: 8000 },
  { question: 'What is the primary treatment for tuberculosis?', options: ['Antibiotics', 'Surgery', 'Chemotherapy', 'Radiation therapy'], answer: 'Antibiotics', prize: 16000 },
  { question: 'What is the term for the process of tuberculosis bacteria spreading from the lungs to other parts of the body?', options: ['Metastasis', 'Dissemination', 'Diffusion', 'Infiltration'], answer: 'Dissemination', prize: 32000 },
  { question: 'What is the name of the disease caused by the bacterium Mycobacterium bovis?', options: ['Tuberculosis', 'Bovine tuberculosis', 'Avian tuberculosis', 'Swine tuberculosis'], answer: 'Bovine tuberculosis', prize: 64000 },
  { question: 'What is the primary method of preventing tuberculosis transmission in healthcare settings?', options: ['Personal protective equipment', 'Isolation', 'Vaccination', 'Screening'], answer: 'Personal protective equipment', prize: 125000 },
  { question: 'What is the term for the process of identifying and treating individuals with latent tuberculosis infection?', options: ['Screening', 'Testing', 'Treatment', 'Prevention'], answer: 'Screening', prize: 250000 },
  { question: 'What is the name of the global strategy to control and eliminate tuberculosis?', options: ['Stop TB Strategy', 'End TB Strategy', 'TB Control Strategy', 'Global TB Strategy'], answer: 'End TB Strategy', prize: 500000 },
  { question: 'What is the primary goal of the World Health Organization\'s tuberculosis control program?', options: ['Elimination', 'Control', 'Prevention', 'Treatment'], answer: 'Elimination', prize: 1000000 },
];

const Game = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [safetyZone, setSafetyZone] = useState(0);
  const [fiftyFiftyUsed, setFiftyFiftyUsed] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [startGame, setStartGame] = useState(false);

  const handleStartGame = () => {
    setStartGame(true);
  };

  const handleAnswer = (answer) => {
    if (answer === questions[currentQuestion].answer) {
      setScore(questions[currentQuestion].prize);
      setCurrentQuestion(currentQuestion + 1);
      if (currentQuestion === 4 || currentQuestion === 9) {
        setSafetyZone(questions[currentQuestion].prize);
      }
    } else {
      if (currentQuestion < 5) {
        setScore(0);
      } else if (currentQuestion < 10) {
        setScore(safetyZone);
      } else {
        setScore(safetyZone);
      }
      setGameOver(true);
    }
  };

  const handleFiftyFifty = () => {
    if (!fiftyFiftyUsed) {
      setFiftyFiftyUsed(true);
      const incorrectOptions = questions[currentQuestion].options.filter(option => option !== questions[currentQuestion].answer);
      const randomIndex = Math.floor(Math.random() * 2);
      const eliminatedOption1 = incorrectOptions[randomIndex];
      const eliminatedOption2 = incorrectOptions[1 - randomIndex];
      questions[currentQuestion].options = questions[currentQuestion].options.filter(option => option !== eliminatedOption1 && option !== eliminatedOption2);
    }
  };

  const handleQuit = () => {
    setGameOver(true);
  };

  if (!startGame) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Card>
          <CardHeader>
            <CardTitle>Welcome to Who Wants to Be a Millionaire!</CardTitle>
          </CardHeader>
          <CardContent>
            <p>Game Rules:</p>
            <ul>
              <li>Answer questions correctly to win cash prizes.</li>
              <li>Use the 50/50 lifeline to eliminate two incorrect options.</li>
              <li>Quit the game at any time to keep your current winnings.</li>
              <li>If you answer a question incorrectly, you will fall back to the last safety zone.</li>
            </ul>
          </CardContent>
          <CardFooter>
            <Button onClick={handleStartGame}>Start Game</Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  if (gameOver) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Card>
          <CardHeader>
            <CardTitle>Game Over!</CardTitle>
          </CardHeader>
          <CardContent>
            <p>Your final score is: ${score}</p>
          </CardContent>
          <CardFooter>
            <Button onClick={() => window.location.reload()}>Play Again</Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex justify-center items-center h-screen">
      <div className="flex flex-row w-full">
        <div className="flex flex-col w-1/4">
          <h2 className="text-2xl font-bold">Scoreboard</h2>
          <ul>
            {questions.map((question, index) => (
              <li key={index} className={`text-lg ${index === currentQuestion ? 'bg-red-500 text-white' : ''}`}>${question.prize}</li>
            ))}
          </ul>
        </div>
        <div className="flex flex-col w-3/4">
          <Card>
            <CardHeader>
              <CardTitle>Question {currentQuestion + 1}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>{questions[currentQuestion].question}</p>
              <div className="grid grid-cols-2 gap-4">
                {questions[currentQuestion].options.map((option, index) => (
                  <Button key={index} variant="outline" onClick={() => handleAnswer(option)}>{option}</Button>
                ))}
              </div>
            </CardContent>
            <CardFooter>
              <div className="grid grid-cols-2 gap-4">
                <Button variant="outline" onClick={handleFiftyFifty} disabled={fiftyFiftyUsed}>50/50</Button>
                <Button variant="outline" onClick={handleQuit}>Quit</Button>
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Game;
